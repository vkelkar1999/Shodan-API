/*
  Copyright Jes√∫s Rubio <jesusprubio@gmail.com>

  This code may only be used under the MIT license found at
  https://opensource.org/licenses/MIT.
*/

'use strict';

const test = require('ava');
const client = require('../../..');
const helpers = require('../../helpers');

let firstNoPages;

test('should fail if "query" parameter no present', async t => {
  await t.throwsAsync(
    async () => { await client.exploits.search() },
    { message: /Required parameter: query/ }
  );
});

test('should fail if "key" parameter no present', async t => {
  await t.throwsAsync(
    async () => { await client.exploits.search('a') },
    { message: 'You must provide a valid API key' }
  );
});

test('should fail if the API key is not valid', async t => {
  await t.throwsAsync(
    async () => { await client.exploits.search('a', 'a') },
    { message: /got.get : Response code 401/ }
  );
});

test('should have into account the "timeout" option', async t => {
  await t.throwsAsync(
    async () => { await client.exploits.search('a', 'a', { timeout: 1 }) },
    { message: /got.get : Timeout awaiting/ }
  );
});

test('should return a lot for a common service', async t => {
  await helpers.sleep();

  const res = await client.exploits.search('apache', process.env.API_KEY);

  t.deepEqual(Object.keys(res), ['matches', 'total']);
  t.true(res.total > 10);
  t.deepEqual(Object.keys(res.matches[0]), [
    'source',
    '_id',
    'description',
    'osvdb',
    'bid',
    'cve',
    'msb',
  ]);

  // To compare later.
  // eslint-disable-next-line no-underscore-dangle
  firstNoPages = res.matches[0]._id;
});

test('should return 0 for a non existent service', async t => {
  await helpers.sleep();

  const res = await client.exploits.search('nonexistentservice', process.env.API_KEY);

  t.is(res.matches.length, 0);
});

test('should return a different response using "facets" option', async t => {
  await helpers.sleep();

  const res = await client.exploits.search('asterisk', process.env.API_KEY, {
    facets: 'author',
  });

  t.deepEqual(Object.keys(res), ['matches', 'facets', 'total']);
});

test('should return a different first one for the same service but using "page" option', async t => {
  const res = await client.exploits.search('asterisk', process.env.API_KEY, {
    page: 2,
  });

  t.deepEqual(Object.keys(res), ['matches', 'total']);
  // eslint-disable-next-line no-underscore-dangle
  t.not(res.matches[0]._id, firstNoPages);
});
